<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />

	<title>@ViewBag.Title</title>

	<link rel="shortcut icon" type="image/png" href="@Url.Content("~/Content/jasmine_favicon.png")">

	<link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
	<link href="@Url.Content("~/Content/jasmine.css")" rel="stylesheet" type="text/css" />

	<script src="@Url.Content("~/Scripts/jquery-1.7.1.js")" type="text/javascript"></script>
	<script src="@Url.Content("~/Scripts/jasmine.js")" type="text/javascript"></script>
	<script src="@Url.Content("~/Scripts/jasmine-html.js")" type="text/javascript"></script>

	<script src="@Url.Content("~/Scripts/lab/Queue.js")" type="text/javascript"></script>
	<script src="@Url.Content("~/Scripts/lab/RequestFlow.js")" type="text/javascript"></script>

	<script src="@Url.Content("~/Scripts/spec/QueueSpec.js")" type="text/javascript"></script>
	<script src="@Url.Content("~/Scripts/spec/RequestFlowSpec.js")" type="text/javascript"></script>

	<script type="text/javascript">
		(function () {
			var jasmineEnv = jasmine.getEnv();
			jasmineEnv.updateInterval = 1000;

			var trivialReporter = new jasmine.TrivialReporter();

			jasmineEnv.addReporter(trivialReporter);

			jasmineEnv.specFilter = function (spec) {
				return trivialReporter.specFilter(spec);
			};

			var currentWindowOnload = window.onload;

			window.onload = function () {
				if (currentWindowOnload) {
					currentWindowOnload();
				}
				execJasmine();
			};

			function execJasmine() {
				jasmineEnv.execute();
			}
		})();

		beforeEach(function () {
			this.addMatchers({
				toBePlaying: function (expectedSong) {
					var player = this.actual;
					return player.currentlyPlayingSong === expectedSong && player.isPlaying;
				}
			});
		});
	</script>
</head>
<header>
	Deferred Object
</header>
<body>
	@RenderBody()
</body>
</html>
